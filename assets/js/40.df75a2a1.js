(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{561:function(t,a,s){t.exports=s.p+"assets/img/collection-01.9a3d9eb9.png"},562:function(t,a,s){t.exports=s.p+"assets/img/collection-02.ddb4702d.png"},563:function(t,a,s){t.exports=s.p+"assets/img/collection-03.97ed7f00.png"},811:function(t,a,s){"use strict";s.r(a);var e=s(27),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"java-컬렉션-collection-정리"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-컬렉션-collection-정리"}},[t._v("#")]),t._v(" Java 컬렉션(Collection) 정리")]),t._v(" "),e("h2",{attrs:{id:"java-collections-framework-jcf"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-collections-framework-jcf"}},[t._v("#")]),t._v(" Java Collections Framework(JCF)")]),t._v(" "),e("p",[t._v("Java에서 컬렉션(Collection)이란 데이터의 집합, 그룹을 의미하며")]),t._v(" "),e("p",[e("code",[t._v("JCF(Java Collections Framework)")]),t._v("는 이러한 데이터, 자료구조인 컬렌션과 이를 구현하는 클래스를 정의하는 인터페이스를 제공한다.")]),t._v(" "),e("p",[t._v("다음은 Java 컬렌션 프레임워크의 상속구조를 나타낸다.")]),t._v(" "),e("p",[e("img",{attrs:{src:s(561),alt:"img"}})]),t._v(" "),e("p",[t._v("Collection 인터페이스는 List, Set, Queue로 크게 3가지 상위 인터페이스로 분류할 수 있다.")]),t._v(" "),e("p",[t._v("그리고 여기에 Map의 경우 Collection 인터페이스를 상속받고 있지 않지만 Collection으로 분류된다.")]),t._v(" "),e("ul",[e("li",[t._v("Collection "),e("strong",[t._v("객체는 여러 원소들을 담을 수 있는 자료구조")]),t._v("를 뜻한다.")]),t._v(" "),e("li",[t._v("배열이 가장 기본적인 자료구조이며, DTO 또한 자료를 담는 하나의 방식이라고 볼 수 있다.")])]),t._v(" "),e("p",[t._v("자바에서의 자료구조 유형은 다음과 같다.\n- 순서가 있는 목록인 "),e("strong",[t._v("List형")]),t._v("\n- 순서가 중요하지 않은 목록인 "),e("strong",[t._v("Set형")]),t._v("\n- 먼저 들어온 것이 먼저 나가는 "),e("strong",[t._v("Queue형")]),t._v("\n- KEY-VALUE의 형태로 저장되는 "),e("strong",[t._v("Map형")])]),t._v(" "),e("p",[t._v("배열과의 차이점은 정적 메모리 할당이 아닌 동적 메모리 할당을 하게 된다.")]),t._v(" "),e("p",[t._v("즉, new int[4]을 하면 4개 공간밖에 못쓰고 미리 선언을 통해 4개의 공간을 만들어야 하지만. collection은 공간이 계속 필요한 만큼 추가될 수 있다.")]),t._v(" "),e("h2",{attrs:{id:"collection-인터페이스의-특징"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#collection-인터페이스의-특징"}},[t._v("#")]),t._v(" Collection 인터페이스의 특징")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("인터페이스")]),t._v(" "),e("th",[t._v("구현클래스")]),t._v(" "),e("th",[t._v("특징")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[e("code",[t._v("Set")])]),t._v(" "),e("td",[t._v("HashSet TreeSet")]),t._v(" "),e("td",[t._v("순서를 유지하지 않는 데이터의 집합으로 데이터의 중복을 허용하지 않는다.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("List")])]),t._v(" "),e("td",[t._v("LinkedList Vector ArrayList")]),t._v(" "),e("td",[t._v("순서가 있는 데이터의 집합으로 데이터의 중복을 허용한다.")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("Queue")])]),t._v(" "),e("td",[t._v("LinkedList PriorityQueue")]),t._v(" "),e("td",[t._v("List와 유사")])]),t._v(" "),e("tr",[e("td",[e("code",[t._v("Map")])]),t._v(" "),e("td",[t._v("Hashtable HashMap TreeMap")]),t._v(" "),e("td",[t._v("키(Key), 값(Value)의 쌍으로 이루어진 데이터 집합으로, 순서는 유지되지 않으며 키(Key)의 중복을 허용하지 않으나 값(Value)의 중복은 허용한다.")])])])]),t._v(" "),e("p",[e("img",{attrs:{src:s(562),alt:"img"}})]),t._v(" "),e("p",[t._v("위의 그림을 보면 알 수 있듯이, 컬렉션은 결국 인터페이스이고 아래에서 구현부들이 받아 구현하고 있음을 알 수 있다.")]),t._v(" "),e("h3",{attrs:{id:"_1️⃣set-인터페이스"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1️⃣set-인터페이스"}},[t._v("#")]),t._v(" 1️⃣Set 인터페이스")]),t._v(" "),e("p",[t._v("순서를 유지하지 않는 데이터의 집합으로 데이터의 중복을 허용하지 않는다.")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("HashSet")]),t._v("가장빠른 임의 접근 속도순서를 예측할 수 없음")]),t._v(" "),e("li",[e("strong",[t._v("TreeSet")]),t._v("정렬방법을 지정할 수 있음")])]),t._v(" "),e("h3",{attrs:{id:"_2️⃣list-인터페이스"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2️⃣list-인터페이스"}},[t._v("#")]),t._v(" 2️⃣List 인터페이스")]),t._v(" "),e("p",[t._v("순서가 있는 데이터의 집합으로 데이터의 중복을 허용한다.")]),t._v(" "),e("p",[t._v("List 인터페이스는 Collection의 다른 인터페이스들과 가장 큰 차이는 "),e("strong",[t._v("배열처럼 순서가 있다는 것")]),t._v("이다.")]),t._v(" "),e("p",[t._v("위의 그림에서 "),e("strong",[t._v("ArrayList, LinkedList, Vector, Stack")]),t._v("가 순서 있는 Collection으로 가장 많이 사용된다.")]),t._v(" "),e("p",[t._v("이때 ArrayList와 Vector 클래스는 거의 동일하지만,  "),e("strong",[t._v("ArrayList는 Thread safe하지 않고, Vector는 Thread safe하다.")]),t._v(" (Thread safe하지 않다는 것은 객체에 여러 명이 달려들어 값을 변경하려고 하면 문제가 발생할 수 있다는 것)")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("LinkedList")]),t._v("양방향 포인터 구조로 데이터의 삽입, 삭제가 빈번할 경우 데이터의 위치정보만 수정하면 되기에 유용스택, 큐, 양방향 큐 등을 만들기 위한 용도로 쓰임")]),t._v(" "),e("li",[e("strong",[t._v("Vector")]),t._v("과거에 대용량 처리를 위해 사용했으며, 내부에서 자동으로 동기화처리가 일어나 비교적 성능이 좋지 않고 무거워 잘 쓰이지 않음")]),t._v(" "),e("li",[e("strong",[t._v("ArrayList")]),t._v("단방향 포인터 구조로 각 데이터에 대한 인덱스를 가지고 있어 조회 기능에 성능이 뛰어남")])]),t._v(" "),e("h3",{attrs:{id:"_3️⃣map-인터페이스"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3️⃣map-인터페이스"}},[t._v("#")]),t._v(" 3️⃣Map 인터페이스")]),t._v(" "),e("p",[t._v("키(Key), 값(Value)의 쌍으로 이루어진 데이터으 집합으로,")]),t._v(" "),e("p",[t._v("순서는 유지되지 않으며 키(Key)의 중복을 허용하지 않으나 값(Value)의 중복은 허용한다.")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Hashtable")]),t._v("HashMap보다는 느리지만 동기화 지원null불가")]),t._v(" "),e("li",[e("strong",[t._v("HashMap")]),t._v("중복과 순서가 허용되지 않으며 null값이 올 수 있다.")]),t._v(" "),e("li",[e("strong",[t._v("TreeMap")]),t._v("정렬된 순서대로 키(Key)와 값(Value)을 저장하여 검색이 빠름")])]),t._v(" "),e("h4",{attrs:{id:"_1-hashmap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-hashmap"}},[t._v("#")]),t._v(" 1. HashMap**")]),t._v(" "),e("p",[t._v("대부분 HashMap 객체를 생성할 때에는 매개 변수가 없는 생성자를 사용한다.하지만 HashMap에 담을 데이터의 개수가 많은 경우에는 초기 크기를 지정해주는 것을 권장한다.")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" map"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h4",{attrs:{id:"_2-treemap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-treemap"}},[t._v("#")]),t._v(" 2. TreeMap")]),t._v(" "),e("p",[t._v("TreeMap 클래스는 키와 값을 저장하는 동시에 키를 정렬한다.")]),t._v(" "),e("ul",[e("li",[t._v("정렬되는 순서는 숫자 > 알파벳 대문자 > 알파벳 소문자 > 한글 순이다.")]),t._v(" "),e("li",[t._v("정렬을 해야 할 필요가 있다면 HashMap 보다는 TreeMap을 사용하는 것이 더 유리하다.")])]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeMap")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" treeMap "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeMap")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h3",{attrs:{id:"collection-인터페이스에-선언된-주요-메소드"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#collection-인터페이스에-선언된-주요-메소드"}},[t._v("#")]),t._v(" Collection 인터페이스에 선언된 주요 메소드")]),t._v(" "),e("p",[e("img",{attrs:{src:s(563),alt:"img"}})]),t._v(" "),e("hr"),t._v(" "),e("h4",{attrs:{id:"reference"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[t._v("#")]),t._v(" Reference")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.crocus.co.kr/1553",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.crocus.co.kr/1553"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);