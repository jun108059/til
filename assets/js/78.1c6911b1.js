(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{755:function(r,a,t){r.exports=t.p+"assets/img/RPCvsPMI.e8c92255.png"},917:function(r,a,t){"use strict";t.r(a);var e=t(27),v=Object(e.a)({},(function(){var r=this,a=r.$createElement,e=r._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h1",{attrs:{id:"rpc-vs-rmi"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rpc-vs-rmi"}},[r._v("#")]),r._v(" "),e("strong",[r._v("RPC VS RMI")])]),r._v(" "),e("p",[e("img",{attrs:{src:t(755),alt:"img"}})]),r._v(" "),e("p",[r._v("RPC와 RMI의 기본 차이점은 RPC는 원격 컴퓨터에서 프로 시저를 호출 할 수있는 메커니즘이고 RMI는 Java에서 RPC의 구현입니다. RPC는 언어 중립적이지만 전달할 기본 데이터 유형 만 지원합니다. 반면에 RMI는 Java로 제한되지만 객체를 전달할 수 있습니다. RPC는 전통적인 절차 적 언어 구성을 따르는 반면 RMI는 객체 지향 디자인을 지원합니다.")]),r._v(" "),e("h2",{attrs:{id:"rpc란"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rpc란"}},[r._v("#")]),r._v(" RPC란?")]),r._v(" "),e("p",[r._v("원격 프로 시저 호출을 의미하는 RPC는 프로세스 간 통신 유형입니다. 이를 통해 로컬 컴퓨터 또는 원격 컴퓨터에서 실행중인 다른 프로세스에서 함수를 호출 할 수 있습니다. 이 개념은 1980 년에 오래 전에 등장했지만, 유닉스에서 처음으로 유명한 구현이있었습니다.")]),r._v(" "),e("p",[r._v("RPC에는 여러 단계가 포함됩니다. 클라이언트는 평소와 같이 로컬 컴퓨터에서 프로 시저 호출을 수행합니다. 클라이언트 스텁이라는 모듈은 인수를 수집하여 메시지를 작성하고 운영 체제로 전달합니다. 운영 체제는 시스템 호출을 수행하여이 메시지를 원격 컴퓨터로 보냅니다. 서버의 운영 체제는 메시지를 수집하여 서버 스텁이라는 서버의 모듈로 전달합니다. 그런 다음 서버 스텁은 서버에서 프로 시저를 호출합니다. 마지막으로 결과가 클라이언트로 다시 전송됩니다.")]),r._v(" "),e("p",[r._v("RPC 사용의 이점은 네트워크 세부 사항과 독립적이라는 것입니다. 프로그래머는 추상적 인 방식으로 지정하면되며 운영 체제는 내부 네트워크 세부 정보를 확인합니다. 따라서 물리적 및 프로토콜의 차이에도 불구하고 프로그래밍이 쉬워지고 모든 네트워크에서 RPC가 작동합니다. RPC 구현은 Unix, Linux, Windows 및 OS X와 같은 모든 주류 운영 체제에 존재합니다. RPC는 일반적으로 언어 중립이므로 모든 언어에 공통적이어야하므로 데이터 유형을 가장 원시적 인 유형으로 제한합니다. RPC의 접근 방식은 객체 지향적이지 않지만 C와 같은 전통적인 절차 메커니즘입니다.")]),r._v(" "),e("h2",{attrs:{id:"rmi란"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rmi란"}},[r._v("#")]),r._v(" RMI란?")]),r._v(" "),e("p",[r._v("RMI (Remote Method Invocation)는 객체 지향 특성을 지원하기 위해 Java로 RPC를 구현하는 API (Application Programming Interface)입니다. 이를 통해 동일한 컴퓨터 또는 원격 컴퓨터에있는 다른 Java Virtual Machine에서 Java 메소드를 호출 할 수 있습니다. RMI의 한계는 Java 메소드 만 호출 할 수 있다는 것입니다. 그러나 이는 오브젝트를 인수 및 리턴 값으로 전달할 수 있다는 이점이 있습니다. Java 가상 머신에서 바이트 코드를 사용하여 성능이 RMI가 RPC보다 느리다고 생각 될 때 RMI는 프로그래머에게 친숙하고 사용하기가 매우 쉽습니다.")]),r._v(" "),e("p",[r._v("RMI는 Java에서 기본 제공 보안 메커니즘을 사용하고 비 TCP 사용자 지정 전송 계층 프로토콜을 사용할 수있는 소켓 팩토리도 제공합니다. 또한 RMI는 방화벽을 우회하는 방법을 제공합니다. RMI에서 발생하는 단계는 RPC와 유사합니다. RMI의 구현은 프로그래머가 걱정할 필요가없는 내부 네트워크 세부 사항을 조사합니다.")]),r._v(" "),e("h2",{attrs:{id:"rpc와-rmi의-차이점은"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rpc와-rmi의-차이점은"}},[r._v("#")]),r._v(" RPC와 RMI의 차이점은?")]),r._v(" "),e("ul",[e("li",[r._v("RPC는 언어 중립적이며 RMI는 Java로 제한됩니다.")]),r._v(" "),e("li",[r._v("RPC는 C 에서처럼 절차 적이지만 RMI는 객체 지향적입니다.")]),r._v(" "),e("li",[r._v("RPC는 기본 데이터 형식 만 지원하고 RMI는 개체를 인수 및 반환 값으로 전달할 수 있도록합니다. RPC를 사용할 때 프로그래머는 복합 오브젝트를 기본 데이터 유형으로 분할해야합니다.")]),r._v(" "),e("li",[r._v("RMI는 해당 RPC를 쉽게 프로그래밍 할 수 있습니다.")]),r._v(" "),e("li",[r._v("RMI에는 Java 바이트 코드 실행이 포함되므로 RMI가 RPC보다 느립니다.")]),r._v(" "),e("li",[r._v("RMI는 객체 지향 특성으로 인해 디자인 패턴을 사용할 수 있지만 RPC에는이 기능이 없습니다.")])]),r._v(" "),e("h2",{attrs:{id:"rpc-vs-rmi-요약"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rpc-vs-rmi-요약"}},[r._v("#")]),r._v(" RPC VS RMI 요약")]),r._v(" "),e("p",[r._v("RPC는 원격 컴퓨터에서 프로 시저를 호출 할 수있는 언어 중립 메커니즘입니다. 그러나 언어 중립 기능은 인수로 전달되는 데이터 유형을 제한하고 값을 기본 유형으로 리턴합니다. RMI는 Java로 RPC를 구현 한 것으로 객체 전달도 지원하므로 프로그래머의 수명을 단축시킵니다. RMI의 장점은 객체 지향 디자인 지원이지만 Java에 대한 제한은 단점입니다.")]),r._v(" "),e("h3",{attrs:{id:"reference"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[r._v("#")]),r._v(" Reference")]),r._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://ko.bccrwp.org/compare/difference-between-rpc-and-rmi/",target:"_blank",rel:"noopener noreferrer"}},[r._v("https://ko.bccrwp.org/compare/difference-between-rpc-and-rmi/"),e("OutboundLink")],1)])]),r._v(" "),e("h3",{attrs:{id:"todo-글보고-추가하기"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#todo-글보고-추가하기"}},[r._v("#")]),r._v(" Todo 글보고 추가하기")]),r._v(" "),e("ul",[e("li",[r._v("https://techdifferences.com/difference-between-rpc-and-rmi.html")])])])}),[],!1,null,null,null);a.default=v.exports}}]);