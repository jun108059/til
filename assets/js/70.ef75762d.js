(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{518:function(e,_,v){e.exports=v.p+"assets/img/redis01.1fab9921.png"},756:function(e,_,v){"use strict";v.r(_);var s=v(12),t=Object(s.a)({},(function(){var e=this,_=e._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[_("h1",{attrs:{id:"redis-레디스"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#redis-레디스"}},[e._v("#")]),e._v(" Redis(레디스)")]),e._v(" "),_("p",[e._v("Redis는 REmote DICtionary Server의 약자로, 데이터 스토어 오픈소스")]),e._v(" "),_("blockquote",[_("p",[e._v("기업을 위한 엔터프라이즈 버전도 제공!")])]),e._v(" "),_("p",[_("img",{attrs:{src:v(518),alt:"img"}})]),e._v(" "),_("h2",{attrs:{id:"_1-redis의-기능"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-redis의-기능"}},[e._v("#")]),e._v(" 1.Redis의 기능")]),e._v(" "),_("p",[e._v("다음과 같은 대표적인 기능을  제공한다.")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("애플리케이션이 호출하는 데이터베이스 쿼리 결괏값을 데이터베이스 앞단에서 "),_("strong",[e._v("In-Memory 캐싱")])])]),e._v(" "),_("li",[_("p",[_("strong",[e._v("Pub/Sub 구조의 메시지 브로커")]),e._v(" 혹은 리스트 데이터 구조를 사용한 메시지 큐, 대기열")])]),e._v(" "),_("li",[_("p",[e._v("사용자 인증 토큰, 세션 상태 등 세션 정보를 관리하는 "),_("strong",[e._v("세션 스토어")])])])]),e._v(" "),_("blockquote",[_("p",[e._v("Redis의 기능은 In-Memory 캐싱, Pub/Sub 구조의 메시지 큐, 세션 스토어")])]),e._v(" "),_("h3",{attrs:{id:"_1️⃣-in-memory-캐싱"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1️⃣-in-memory-캐싱"}},[e._v("#")]),e._v(" 1️⃣ In-Memory 캐싱")]),e._v(" "),_("ul",[_("li",[e._v("가장 강력한 기능 중 하나")]),e._v(" "),_("li",[e._v("실제로 개발팀이 Redis를 사용하는 대부분의 이유")])]),e._v(" "),_("p",[e._v("데이터베이스 쿼리 결과를 Redis 서버의 메모리에 저장하였다가 애플리케이션에 전달해 주고, 결과 값이 캐싱에 없는 쿼리는 데이터베이스에 접속하여 결과를 가져와서 애플리케이션에 전달 후 캐싱한다. 이런 프로세스는 "),_("strong",[e._v("CDN 캐싱")]),e._v("과도 동일한 원리이다.")]),e._v(" "),_("ul",[_("li",[e._v("Back-End 쪽, 특히 데이터베이스 부하를 줄일 수 있음")]),e._v(" "),_("li",[e._v("다만 Redis의 In-Memory 용량이 무한하지 않으므로 더 이상 필요 없는 캐시는 종종 삭제해야 하는데 캐시 보관 및 삭제 알고리즘은 보통 **"),_("a",{attrs:{href:"https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)",target:"_blank",rel:"noopener noreferrer"}},[e._v("LRU Eviction"),_("OutboundLink")],1),e._v("**을 사용")])]),e._v(" "),_("p",[e._v("​")]),e._v(" "),_("p",[_("strong",[e._v("세션 스토어")]),e._v("의 경우 ID/PW로 로그인을 정상적으로 완료한 클라이언트에게 웹 서버는 SessionID 쿠키를 내려주고, Redis의 세션 스토어에도 이 정보를 보관하여 추후 클라이언트가 로그인이 필요한 페이지에 접속 시 요청 헤더에 포함된 SessionID 쿠키와 세션 스토어에 남아있는 SessionID를 비교하여 유효성을 검사하는데 사용한다.")]),e._v(" "),_("p",[e._v("​")]),e._v(" "),_("h2",{attrs:{id:"_2-redis의-장점"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-redis의-장점"}},[e._v("#")]),e._v(" 2.Redis의 장점")]),e._v(" "),_("p",[e._v("가장 큰 장점은 원하는 데이터를 1밀리 초안에 응답할 정도로 속도가 빠르다.")]),e._v(" "),_("h3",{attrs:{id:"_1️⃣응답-속도가-빠른-이유"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1️⃣응답-속도가-빠른-이유"}},[e._v("#")]),e._v(" 1️⃣응답 속도가 빠른 이유")]),e._v(" "),_("ol",[_("li",[_("p",[e._v("데이터를 HDD, SSD에 저장하는 일반 데이터베이스와 달리 Redis는 모든 데이터가 메모리에 상주.")])]),e._v(" "),_("li",[_("p",[e._v("In-Memory 저장 뿐만 아니라 솔루션 자체가 C언어로 개발된 것도 빠른 성능이 가능한 이유.")])]),e._v(" "),_("li",[_("p",[e._v("데이터가 Key-Value 형태로 저장되어 조회 속도가 빠름.")])])]),e._v(" "),_("p",[e._v("​")]),e._v(" "),_("blockquote",[_("p",[e._v("빠른 응답 시간 덕분에 주로 빠른 데이터 처리가 필요한 실시간 애플리케이션에 많이 사용된다. 초당 수백만 건의 요청을 무리 없이 지원할 정도로 빠르다.")])]),e._v(" "),_("h2",{attrs:{id:"_3-redis가-지원하는-데이터-타입"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-redis가-지원하는-데이터-타입"}},[e._v("#")]),e._v(" 3.Redis가 지원하는 데이터 타입")]),e._v(" "),_("p",[e._v("• 문자열(string) – 최대 512MB 크기의 텍스트 또는 바이너리 데이터")]),e._v(" "),_("p",[e._v("• 목록(list) – 추가된 순서가 유지되는 문자열 모음")]),e._v(" "),_("p",[e._v("• 세트(set) – 순서가 유지되지 않는 문자열 모음으로 다른 세트 유형과 교차, 통합 및 비교 가능")]),e._v(" "),_("p",[e._v("• 정렬된 세트(ordered set) – 값을 기준으로 순서가 지정된 세트")]),e._v(" "),_("p",[e._v("• 해시(hash) – 필드 및 값의 목록을 저장하는 데이터 구조")]),e._v(" "),_("p",[e._v("• 스트림(stream)")]),e._v(" "),_("p",[e._v("• 이진화된 파일(binary file)")]),e._v(" "),_("p",[e._v("• 비트맵 – 비트 수준 작업을 제공하는 데이터 유형")]),e._v(" "),_("p",[e._v("• HyperLogLogs – 데이터 세트 내 고유 항목을 추정하기 위한 확률적 데이터 구조")]),e._v(" "),_("p",[e._v("데이터 타입도 다양하고, 지원하는 애플리케이션 개발 환경도 대부분의 프로그래밍 언어를 지원하며 이는 개발 생산성에 도움을 준다.")]),e._v(" "),_("p",[e._v("​")]),e._v(" "),_("h2",{attrs:{id:"_4-redis의-데이터-복제-replication"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-redis의-데이터-복제-replication"}},[e._v("#")]),e._v(" 4.Redis의 데이터 복제(Replication)")]),e._v(" "),_("p",[e._v("Redis는 기본적으로 Replica Set을 지원한다.\n데이터 복제(Replication)는 비동기식 형태로 가동하며, 서브 노드가 주 노드의 데이터를 복제 및 백업하기 때문에 HA(High Availaibility)를 필요로 하는 엔터프라이즈 환경에 적합하다.\n주 노드에서 Read 수행을 하는 것이 일반적이나, 때로는 서브 노드에서도 Read를 지원하여 복제 세트 내부에서 부하 분산도 가능.\nRedis를 제대로 쓰려면 HA 구성을 하는 것이 좋다!. 클러스터링 및 샤딩은 어떻게 할지도 고민해야 할 것이다.")]),e._v(" "),_("h2",{attrs:{id:"_5-memcached와의-비교"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-memcached와의-비교"}},[e._v("#")]),e._v(" 5.Memcached와의 비교")]),e._v(" "),_("p",[e._v("또 하나 유명한 데이터베이스 캐싱 솔루션으로 memcached가 있다.")]),e._v(" "),_("p",[e._v("memcached 또한 In-Memory 데이터 스토어이고 빠른 성능을 자랑하기 때문에 RDBMS나 NoSQL 데이터 캐싱을 위해 사용하는 것은 Redis와 동일하다. 다만 memCached는 Redis에 비해 단순한 설정을 지원해서 간단하게 데이터베이스 내용을 캐싱 할 필요가 있을 때 유용.")]),e._v(" "),_("p",[e._v("​")]),e._v(" "),_("h3",{attrs:{id:"데이터-캐싱이-아닌-메시징-기능은-어떠한가"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#데이터-캐싱이-아닌-메시징-기능은-어떠한가"}},[e._v("#")]),e._v(" 데이터 캐싱이 아닌, 메시징 기능은 어떠한가?")]),e._v(" "),_("p",[e._v("다양한 데이터 구조(리스트, 셋, 해시 등)를 통해 Pub/Sub 형태의 메시지큐를 지원")]),e._v(" "),_("p",[e._v("일반적으로 메시징을 위한 메시지큐는 대용량 시스템에서 동시에 많은 트래픽이 인입되고 Write/Read 등의 트랜잭션이 수없이 밀려들어올 때, 메시지큐가 트랜잭션 스케줄링을 해준다.")]),e._v(" "),_("ul",[_("li",[_("p",[e._v("고성능 실시간 애플리케이션 - 채팅, 실시간 댓글, 소셜 미디어 상의 피딩, 메신저 - 등에 유용합니다.")])]),e._v(" "),_("li",[_("p",[e._v("리스트 데이터 구조를 사용하면 간단한 대기열을 쉽게 구현할 수 있습니다.")])]),e._v(" "),_("li",[_("p",[e._v("정렬된 세트 구조를 사용하면 게임 순위표와 같이 실시간으로​ 전체 데이터가 업데이트/정렬될 때 편리합니다.")])])]),e._v(" "),_("p",[e._v("​#### Reference")]),e._v(" "),_("ul",[_("li",[e._v("https://m.blog.naver.com/PostView.nhn?blogId=sehyunfa&logNo=221660349078&proxyReferer=https:%2F%2Fwww.google.com%2F")])])])}),[],!1,null,null,null);_.default=t.exports}}]);