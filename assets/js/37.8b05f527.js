(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{401:function(t,e,r){"use strict";r.r(e);var s=r(27),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"도커-설치하기"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#도커-설치하기"}},[t._v("#")]),t._v(" 도커 설치하기")]),t._v(" "),r("p",[r("img",{attrs:{src:"/docs/.vuepress/public/images/img-docker/docker-logo.png",alt:"img"}})]),t._v(" "),r("p",[t._v("도커는 리눅스 컨테이너 기술이므로 macOS나 windows에 설치할 경우 가상머신에 설치가 됨")]),t._v(" "),r("blockquote",[r("p",[t._v("리눅스 컨테이너 말고 윈도우즈 컨테이너라는 것도 있지만 리눅스 컨테이너를 사용할 예정!")])]),t._v(" "),r("h2",{attrs:{id:"linux"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#linux"}},[t._v("#")]),t._v(" Linux")]),t._v(" "),r("p",[t._v("리눅스에 도커를 설치하는 방법은 자동 설치 스크립트를 이용하는 것이 가장 쉽다. 다음 명령어를 입력하면 root 권한을 요구하고 잠시 기다리면 설치가 완료된다.")]),t._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[r("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -fsSL https://get.docker.com/ "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v("\n")])])]),r("h2",{attrs:{id:"sudo-없이-사용하기"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#sudo-없이-사용하기"}},[t._v("#")]),t._v(" sudo 없이 사용하기")]),t._v(" "),r("p",[t._v("docker는 기본적으로 root권한이 필요하다. root가 아닌 사용자가 sudo없이 사용하려면 해당 사용자를 docker그룹에 추가하면 된다.")]),t._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[r("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("usermod")]),t._v(" -aG docker "),r("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$USER")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 현재 접속중인 사용자에게 권한주기")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("usermod")]),t._v(" -aG docker your-user "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# your-user 사용자에게 권한주기")]),t._v("\n")])])]),r("p",[t._v("사용자가 로그인 중이라면 다시 로그인 후 권한이 적용된다.")]),t._v(" "),r("h2",{attrs:{id:"docker-for-mac-docker-for-windows"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker-for-mac-docker-for-windows"}},[t._v("#")]),t._v(" Docker for Mac / Docker for Windows")]),t._v(" "),r("p",[t._v("도커를 맥이나 윈도우즈에 설치하려면 Docker for mac 또는 Docker for windows를 설치하면 된다. 파일을 다운받고 설치하고 재부팅하면 대부분 문제없이 완료된다. 소소한 옵션들이 있는데 특별히 건드릴 부분은 없으나 한번 살펴보고 적절하게 설정하면 된다. (windows는 공유 드라이브를 선택!)")]),t._v(" "),r("p",[r("img",{attrs:{src:"/docs/.vuepress/public/images/img-docker/docker-for-mac.png",alt:"img"}})]),t._v(" "),r("p",[t._v("마치 네이티브스럽게 설치된 것 같지만 도커는 리눅스 컨테이너이므로 실제로는 가상머신에 설치가 되었다. 사용자는 가상머신을 사용한다는 느낌이 전혀 안드는데 그런부분을 굉장히 신경써서 설계한 것 같다. 예를 들면, 포트를 연결하기 위해 도커 컨테이너의 특정 포트를 가상머신에 연결하고 다시 mac이나 windows의 포트와 연결해야 한다. 디렉토리를 연결한다면 디렉토리를 가상머신과 공유하고 그 디렉토리를 다시 컨테이너와 연결해야 한다. 이런 한단계 추가적으로 거쳐야하는 부분을 자연스럽게 처리해준다!")]),t._v(" "),r("blockquote",[r("p",[t._v("docker for mac은 xhyve라는 macOS에서 제공하는 가상환경을 이용하고 docker for windows는 Hyper-V기능을 이용한다. 따라서 OS가 최신버전이 아니면 동작하지 않을 수 있다.")])]),t._v(" "),r("h2",{attrs:{id:"가상머신에-설치하기"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#가상머신에-설치하기"}},[t._v("#")]),t._v(" 가상머신에 설치하기")]),t._v(" "),r("p",[t._v("이런저런 이유로 Docker for … 를 사용하지 못하는 경우 Docker machine을 이용할 수 있는데 처음 도커를 공부하는 경우에는 Virtual Box나 VMware같은 가상머신에 리눅스를 설치하고 리눅스에 접속하여 도커를 사용하는 방법을 권장함. 처음부터 Docker machine을 사용하면 환경이 약간 혼란스러울 수 있다.")]),t._v(" "),r("h2",{attrs:{id:"설치확인하기"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#설치확인하기"}},[t._v("#")]),t._v(" 설치확인하기")]),t._v(" "),r("p",[t._v("설치가 완료되었다면 정상적으로 설치되었는지 도커 명령어를 입력해 확인!")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("docker version\n")])])]),r("p",[t._v("output:")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("Client:\n Version:      1.12.6\n API version:  1.24\n Go version:   go1.6.4\n Git commit:   78d1802\n Built:        Wed Jan 11 00:23:16 2017\n OS/Arch:      darwin/amd64\n\nServer:\n Version:      1.12.6\n API version:  1.24\n Go version:   go1.6.4\n Git commit:   78d1802\n Built:        Wed Jan 11 00:23:16 2017\n OS/Arch:      linux/amd64\n")])])]),r("p",[t._v("Client와 Server 정보가 정상적으로 출력되었다면 설치 완료!")]),t._v(" "),r("blockquote",[r("p",[t._v("Server 정보가 안나오고 "),r("code",[t._v("Error response from daemon: Bad response from Docker engine")]),t._v("이라는 메시지가 출력되는 경우는 보통 docker daemon이 정상적으로 실행되지 않았거나 "),r("code",[t._v("sudo")]),t._v("를 입력하지 않은 경우.")])]),t._v(" "),r("p",[t._v("버전 정보가 클라이언트와 서버로 나뉘어져 있는데, 도커는 하나의 실행 파일이지만 실제로 클라이언트와 서버역할을 각각 할 수 있다! 도커 커맨드를 입력하면 도커 클라이언트가 도커 서버로 명령을 전송하고 결과를 받아 터미널에 출력해 준다.")]),t._v(" "),r("p",[r("img",{attrs:{src:"/docs/.vuepress/public/images/img-docker/docker-client-host.png",alt:"img"}})]),t._v(" "),r("p",[t._v("기본값이 도커 서버의 소켓을 바라보고 있기 때문에 사용자는 의식하지 않고 마치 바로 명령을 내리는 것 같은 느낌을 받는다. 이러한 설계가 mac이나 windows의 터미널에서 명령어를 입력했을때 "),r("strong",[t._v("가상 서버에 설치된 도커가 동작하는 이유")]),t._v("이다.")]),t._v(" "),r("h2",{attrs:{id:"컨테이너-실행하기"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#컨테이너-실행하기"}},[t._v("#")]),t._v(" 컨테이너 실행하기")]),t._v(" "),r("p",[t._v("도커를 실행하는 명령어는 다음과 같다.")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]\n")])])]),r("p",[t._v("다음은 자주 사용하는 옵션들이다.")]),t._v(" "),r("table",{staticStyle:{"border-collapse":"collapse",width:"92.7907%",height:"324px"},attrs:{border:"1","data-ke-style":"style12"}},[r("tbody",[r("tr",{staticStyle:{height:"19px"}},[r("td",{staticStyle:{height:"19px",width:"50.016%"}},[t._v("옵션")]),r("td",{staticStyle:{height:"19px",width:"49.7514%"}},[t._v("설명")])]),r("tr",{staticStyle:{height:"19px"}},[r("td",{staticStyle:{height:"19px",width:"50.016%"}},[t._v("-d")]),r("td",{staticStyle:{height:"19px",width:"49.7514%"}},[t._v("detached mode 흔히 말하는 백그라운드 모드")])]),r("tr",{staticStyle:{height:"19px"}},[r("td",{staticStyle:{height:"19px",width:"50.016%"}},[t._v("-p")]),r("td",{staticStyle:{height:"19px",width:"49.7514%"}},[t._v("호스트와 컨테이너의 포트를 연결 (포워딩)")])]),r("tr",{staticStyle:{height:"19px"}},[r("td",{staticStyle:{height:"19px",width:"50.016%"}},[t._v("-v")]),r("td",{staticStyle:{height:"19px",width:"49.7514%"}},[t._v("호스트와 컨테이너의 디렉토리를 연결 (마운트)")])]),r("tr",{staticStyle:{height:"19px"}},[r("td",{staticStyle:{height:"19px",width:"50.016%"}},[t._v("-e")]),r("td",{staticStyle:{height:"19px",width:"49.7514%"}},[t._v("컨테이너 내에서 사용할 환경변수 설정")])]),r("tr",{staticStyle:{height:"19px"}},[r("td",{staticStyle:{height:"19px",width:"50.016%"}},[t._v("–name")]),r("td",{staticStyle:{height:"19px",width:"49.7514%"}},[t._v("컨테이너 이름 설정")])]),r("tr",{staticStyle:{height:"19px"}},[r("td",{staticStyle:{height:"19px",width:"50.016%"}},[t._v("–rm")]),r("td",{staticStyle:{height:"19px",width:"49.7514%"}},[t._v("프로세스 종료시 컨테이너 자동 제거")])]),r("tr",{staticStyle:{height:"19px"}},[r("td",{staticStyle:{height:"19px",width:"50.016%"}},[t._v("-it")]),r("td",{staticStyle:{height:"19px",width:"49.7514%"}},[t._v("-i와 -t를 동시에 사용한 것으로 터미널 입력을 위한 옵션")])]),r("tr",{staticStyle:{height:"10px"}},[r("td",{staticStyle:{height:"10px",width:"50.016%"}},[t._v("–link")]),r("td",{staticStyle:{height:"10px",width:"49.7514%"}},[t._v("컨테이너 연결 [컨테이너명:별칭]")])])])]),t._v(" "),r("p",[t._v("엄청나게 직관적인 옵션으로 몇번 실행해보면 자연스럽게 익숙해진다.")]),t._v(" "),r("h4",{attrs:{id:"ubuntu-16-04-container"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ubuntu-16-04-container"}},[t._v("#")]),t._v(" ubuntu 16.04 container")]),t._v(" "),r("p",[t._v("시작은 가볍게 ubuntu 16.04 컨테이너를 생성하고 컨테이너 내부에 들어가 봅니다.")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("docker run ubuntu:16.04\n")])])]),r("blockquote",[r("p",[t._v("이미지를 처음 다운받는 경우")])]),t._v(" "),r("p",[t._v("run명령어를 사용하면 사용할 이미지가 저장되어 있는지 확인하고 없다면 다운로드(pull)를 한 후 컨테이너를 생성(create)하고 시작(start) 한다.")]),t._v(" "),r("p",[t._v("ubuntu:16.04이미지를 다운받은 적이 없으면 이미지를 다운로드 한 후 컨테이너가 실행된다. 컨테이너는 정상적으로 실행됐지만 뭘 하라고 명령어를 전달하지 않았기 때문에 컨테이너는 생성되자마자 종료된다. "),r("strong",[t._v("컨테이너는 프로세스이기 때문에 실행중인 프로세스가 없으면 컨테이너는 종료된다.")])]),t._v(" "),r("p",[t._v("이번에는/bin/bash명령어를 입력해서ubuntu:16.04컨테이너를 실행해보자.")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("docker run --rm -it ubuntu:16.04 /bin/bash\n\n# in container\n$ cat /etc/issue\nUbuntu 16.04.1 LTS \\n \\l\n\n$ ls\nbin   dev  home  lib64  mnt  proc  run   srv  tmp  var\nboot  etc  lib   media  opt  root  sbin  sys  usr\n")])])]),r("p",[t._v("컨테이너 내부에 들어가기 위해 bash 쉘을 실행하고 키보드 입력을 위해-it옵션주고, 프로세스가 종료되면 컨테이너가 자동으로 삭제되도록--rm옵션도 추가한다. 다운로드가 되어있기 때문에 이미지를 다운로드 하는 화면 없이 바로 실행된다.  cat /etc/issue와ls를 실행해보면 ubuntu 리눅스인걸 알 수 있다! (가벼운 가상머신 느낌)")]),t._v(" "),r("p",[t._v("exit로 bash 쉘을 종료하면 컨테이너도 같이 종료된다. 도커를 이용하여 가장 기본적인 컨테이너를 순식간에 만들어 보았다.")]),t._v(" "),r("h4",{attrs:{id:"redis-container"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis-container"}},[t._v("#")]),t._v(" redis container")]),t._v(" "),r("p",[t._v("2번째 컨테이너는redis 이다."),r("a",{attrs:{href:"https://redis.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("redis"),r("OutboundLink")],1),t._v("는 메모리기반의 다양한 기능을 가진 스토리지이다! 6379 포트로 통신하며 telnet 명령어로 테스트해 볼 수 있다. redis 컨테이너는 detached mode(백그라운드 모드)로 실행하기 위해-d옵션을 추가하고-p옵션을 추가하여 컨테이너의 포트를 호스트의 포트로 연결해보았다.")]),t._v(" "),r("blockquote",[r("p",[t._v("-d옵션이 없다면 프로세스가 foreground로 실행되어 아무키도 입력할 수 없게 된다."),r("br"),t._v("\n컨테이너를 종료하려면ctrl + c를 입력하자.")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("docker run -d -p 1234:6379 redis\n5dff91d2cd859b48806231627aadf2066b9b10a8687c765b71ae6cae834ed751\n\n# redis test\n$ telnet localhost 1234\nset mykey hello\n+OK\nget mykey\n$5\nhello\n")])])]),r("p",[t._v("-d옵션을 주었기 때문에 컨테이너를 실행하자마자 컨테이너의 ID(5dff91d2…)를 보여주고 바로 쉘로 돌아왔다. 컨테이너는 종료된 것이 아니라 백그라운드 모드로 동작하고 있고 컨테이너 ID를 이용하여 컨테이너를 제어할 수 있다.-p옵션을 이용하여 호스트의1234포트를 컨테이너의6379포트로 연결하였고 localhost의 1234포트로 접속하면 하면 redis를 사용할 수 있다.")]),t._v(" "),r("p",[t._v("테스트 결과 redis에 접속하여 새로운 키를 저장하고 불러오는데 성공했다. 실행이 간단한건 물론이고 호스트의 포트만 다르게 하면 하나의 서버에 여러개의 redis 서버를 띄우는 것도 매우 간단하다.")]),t._v(" "),r("h4",{attrs:{id:"mysql-5-7-container"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mysql-5-7-container"}},[t._v("#")]),t._v(" MySQL 5.7 container")]),t._v(" "),r("p",[t._v("3번째 실행할 컨테이너는MySQL 서버이다. 가장 흔하게 사용하는 데이터베이스인데 이번에는-e옵션을 이용하여 환경변수를 설정하고--name옵션을 이용하여 컨테이너에 읽기 어려운 ID 대신 쉬운 이름을 부여할 예정이다.")]),t._v(" "),r("blockquote",[r("p",[t._v("--name옵션을 생략하면 도커가 자동으로 이름을 지어 줍니다. 이름은 유명한 과학자나 해커의 이름과 수식어를 조합하여 랜덤으로"),r("a",{attrs:{href:"https://github.com/docker/docker/blob/master/pkg/namesgenerator/names-generator.go",target:"_blank",rel:"noopener noreferrer"}},[t._v("생성"),r("OutboundLink")],1),t._v("합니다. (ex - boring_wozniak) 우리나라 과학자"),r("a",{attrs:{href:"https://github.com/docker/docker/issues/8996",target:"_blank",rel:"noopener noreferrer"}},[t._v("장영실"),r("OutboundLink")],1),t._v("도 등록되어 있습니다.")])]),t._v(" "),r("p",[r("a",{attrs:{href:"https://hub.docker.com/_/mysql/",target:"_blank",rel:"noopener noreferrer"}},[t._v("MySQL Docker hub"),r("OutboundLink")],1),t._v("페이지에 접속하면 간단한 사용법과 환경변수에 대한 설명이 있다. 여러가지 설정값이 있는데 패스워드 없이 root계정을 만들기 위해MYSQL_ALLOW_EMPTY_PASSWORD환경변수를 설정한다. 그리고 컨테이너의 이름은mysql로 할당하고 백그라운드 모드로 띄우기 위해-d옵션을 준다. 포트는3306포트를 호스트에서 그대로 사용하겠다.")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("docker run -d -p 3306:3306 \\\n  -e MYSQL_ALLOW_EMPTY_PASSWORD=true \\\n  --name mysql \\\n  mysql:5.7\n\n# MySQL test\n$ mysql -h127.0.0.1 -uroot\n\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n4 rows in set (0.00 sec)\n\nmysql> quit\n")])])]),r("p",[t._v("순식간에 MySQL서버가 실행되었습니다. 이번 테스트는 호스트 OS에 MySQL 클라이언트가 설치되어 있어야 한다. 추후에 실행중인 MySQL 도커 컨테이너에 접속하여 클라이언트를 실행해 보도록 하겠다.")]),t._v(" "),r("p",[t._v("처음 접속 시도시 에러가 날 경우 MySQL 서버가 최초로 실행되면서 준비작업을 하기 때문에 발생하는 에러이다. 컨테이너를 실행하면 백그라운드에서 MySQL 서버를 띄우는 시간이 필요하기 때문에 잠시 후에 다시 시도 했을 때 정상적으로 접속된 걸 확인할 수 있을 것이다.")]),t._v(" "),r("h3",{attrs:{id:"wordpress-container"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#wordpress-container"}},[t._v("#")]),t._v(" WordPress container")]),t._v(" "),r("p",[t._v("이번에는 블로그엔진으로 유명한"),r("a",{attrs:{href:"https://wordpress.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("워드프레스"),r("OutboundLink")],1),t._v("를 실행한다. 워드프레스는 데이터베이스가 필요하기 때문에 조금 복잡한 형태를 띄지만 크게 어렵지 않다. 바로 전에 생성했던 MySQL 컨테이너에 워드프레스 데이터베이스를 만들고 WordPress 컨테이너를 실행할 때--link옵션을 이용하여 MySQL 컨테이너를 연결해보겠다.")]),t._v(" "),r("p",[t._v("--link옵션은 환경변수와 IP정보를 공유하는데 링크한 컨테이너의 IP정보를/etc/hosts에 자동으로 입력하므로 워드프레스 컨테이너가 MySQL 데이터베이스의 정보를 알 수 있게 된다!")]),t._v(" "),r("p",[t._v("먼저, 워드프레스용 데이터베이스를 생성하고 워드프레스 컨테이너를 실행한다. 호스트의8080포트를 컨테이너의80포트로 연결하고 MySQL 컨테이너와 연결한 후 각종 데이터베이스 설정 정보를 환경변수로 입력한다.")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("# create mysql database\n$ mysql -h127.0.0.1 -uroot\ncreate database wp CHARACTER SET utf8;\ngrant all privileges on wp.* to wp@'%' identified by 'wp';\nflush privileges;\nquit\n\n# run wordpress container\ndocker run -d -p 8080:80 \\\n  --link mysql:mysql \\\n  -e WORDPRESS_DB_HOST=mysql \\\n  -e WORDPRESS_DB_NAME=wp \\\n  -e WORDPRESS_DB_USER=wp \\\n  -e WORDPRESS_DB_PASSWORD=wp \\\n  wordpress\n")])])]),r("p",[t._v("컨테이너가 제대로 실행되었는지 웹 브라우저로 확인해보자.")]),t._v(" "),r("p",[r("img",{attrs:{src:"/docs/.vuepress/public/images/img-docker/wordpress-setup.png",alt:"img"}})]),t._v(" "),r("p",[t._v("워드프레스가 실행되었다! 단지 이미지를 다운받고 적절한 환경변수를 입력하여 컨테이너를 실행했고, 워드프레스 컨테이너 내부는 apache2와 php가 설치되어 있지만 추상화되어 있어 실행과정에서는 드러나지 않는다.")]),t._v(" "),r("blockquote",[r("p",[t._v("이번 예제는 테스트용으로만 사용해야 합니다. 운영 환경에서 사용하려면 추가적인 셋팅이 필요합니다. 이부분은 밑에서 다시 다룹니다.")])]),t._v(" "),r("blockquote",[r("p",[t._v("--link옵션은 deprecated 되어 곧 사용할 수 없습니다. 대신 Docker network 기능을 이용해야 하지만 쉬운 이해를 돕기 위해 사용하였습니다.")])]),t._v(" "),r("p",[t._v("이제, 원하는 서비스가 있다면 이미지를 찾거나 직접 만들고, 어디서나 손쉽게 서비스를 실행할 수 있을 것이다.")]),t._v(" "),r("h4",{attrs:{id:"tensorflow"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tensorflow"}},[t._v("#")]),t._v(" tensorflow")]),t._v(" "),r("p",[t._v("마지막으로 이렇게 활용할 수 있다라는 예제로 tensorflow를 실행보도록 하겠다."),r("a",{attrs:{href:"https://www.tensorflow.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("tensorflow"),r("OutboundLink")],1),t._v("는 손쉽게 머신러닝을 할 수 있는 툴이다. tensorflow는 python으로 만들어져 python과 관련 패키지를 설치해야 한다. 이번에 설치하는 이미지는 python과 함께 numpy, scipy, pandas, jupyter, scikit-learn, gensim, BeautifulSoup4, Tensorflow가 설치되어 있다. 뭔가 복잡해 보이지만 도커라면 손쉽게 실행해 볼 수 있다.")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("docker run -d -p 8888:8888 -p 6006:6006 teamlab/pydata-tensorflow:0.1\n")])])]),r("p",[t._v("설치된 파일이 많아 다운로드 하는데 시간이 좀 걸린다. 컨테이너가 실행되면 웹 브라우저에서 jupyter에 접속하여 머신러닝을 시작해 보자!")]),t._v(" "),r("p",[r("img",{attrs:{src:"/docs/.vuepress/public/images/img-docker/tensorflow.png",alt:"img"}})]),t._v(" "),r("p",[t._v("성공적으로 tensorflow 테스트를 마쳤다. 여기까지 ubuntu, MySQL, redis, Wordpress, tensorflow를 실행해 보았다. 가상머신을 이용해서 동일한 작업을 했다면 컴퓨터가 엄청나게 버벅이기 시작했겠지만 컨테이너 기반의 도커를 이용하여 매우 가볍게 실행하고 있다. 내부 구조나 설치과정은 자세히 모르지만, 간단한 도커 명령어로 여러개의 서비스를 순식간에 실행하고 사용할 수 있다니 정말 최고다.")]),t._v(" "),r("h3",{attrs:{id:"reference"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[t._v("#")]),t._v(" Reference")]),t._v(" "),r("p",[t._v("초보를 위한 도커 안내서 - 설치하고 컨테이너 실행하기")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://subicura.com/2017/01/19/docker-guide-for-beginners-2.html#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0-exec",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://subicura.com/2017/01/19/docker-guide-for-beginners-2.html#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0-exec"),r("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=a.exports}}]);